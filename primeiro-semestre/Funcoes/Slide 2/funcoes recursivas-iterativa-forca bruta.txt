1. (recursiva)
#include <stdio.h>
#include <stdlib.h>

int fibonacci(int n){
        if (n == 0) return 0;
        else if (n == 1) return 1;
        else return fibonacci(n - 1) + fibonacci(n - 2);
}

int main()
{
    int n;
    puts("Digite um numero: ");
    scanf("%d", &n);

    for (int i=0;i<n;i++)
        printf("%d ", fibonacci(i));

    return 0;
}



(iterativa)
#include <stdio.h>
#include <stdlib.h>

void fib(int n){
    int a=0, b=1, temp;
    for (int i=0;i<n;i++){
        printf("%d ", a);
        temp = a + b;
        a = b;
        b = temp;
    }
}

int main()
{
    int n;
    puts("Digite um numero: ");
    if ((scanf("%d", &n)) != 1) {
        puts("Entrada invalida!"); // verificacao nao precisa na prova
        return 1;
    } else if (n <= 0) {
        puts("Entrada invalida: informe um numero inteiro e positivo");
        return 2;
    }

    fib(n);
        

    return 0;
}



2. 
(força bruta)
#include <stdio.h>
#include <stdlib.h>

int main()
{
    int n, a, resultado = 1;
    puts("Digite o numero da BASE: ");
    scanf("%d", &a);
    puts("Digite o expoente: ");
    scanf("%d", &n);

    for (int i = 1; i <= n; i++) resultado = resultado * a;

    printf("%d ", resultado);

    return 0;
}



(iterativa)
#include <stdio.h>
#include <stdlib.h>

int expo(int a, int n){
    int resultado = 1; // só pra pode ter uma variavel pra armazenar o resultado
    while (n > 0) { 
        if (n%2==1) resultado = resultado*a; // se o expoente for ímpar, o resultado vai ser multiplicado pela base de novo
        resultado = resultado*resultado; // se o exponte for par, ele já multiplica o resultado por ele mesmo
        n = n/2; 
    }
    return resultado;
}

int main()
{
    int a, n;
    puts("Digite o numero da BASE e do EXPOENTE: ");
    if (scanf("%d %d", &a, &n) != 2) { // se o programa nao conseguir ler os 2 dois numeros
        puts("Entrada invalida: informe dois valores inteiros");
        return 1; // retorna um tipo de erro
    } else if (n < 0) {// exponte negativo
        puts("Entrada invalida: informe um expoente inteiro e positivo");
        return 2; // retorna outro tipo de erro
    }

    printf("%d", expo(a, n));

    return 0;
}




(recursiva)
#include <stdio.h>
#include <stdlib.h>

int expo(int a, int n){
    if (n == 0) return 1;
    else if (n == 1) return a;
    else if (n>0 && n%2==0) {
            int valor = expo(a, n/2); // vai chamar a funcao de novo, passando como base e expoente os valores do metodo
            return valor*valor;
    }
    else if (n>0 && n%2!=0) {
            int valor = expo(a, (n-1)/2);
            return a * (valor*valor);
    }
}

int main()
{
    int n, a;
    puts("Digite o numero da BASE: ");
    scanf("%d", &a);
    puts("Digite o expoente: ");
    scanf("%d", &n);

    printf("%d ", expo(a, n));

    return 0;
}

